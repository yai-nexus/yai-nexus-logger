---
description: 
globs: 
alwaysApply: true
---
# Python 开源项目开发规则
# 基于 yai-nexus-logger 项目的最佳实践

## 代码风格和质量
- 始终使用中文注释和文档字符串，保持代码的可读性
- 使用类型提示(Type Hints)，特别是在函数参数和返回值上
- 遵循 PEP 8 代码风格规范
- 使用 f-string 进行字符串格式化
- 保持函数和类的单一职责原则

## 项目结构
- 采用标准的 Python 项目布局：
  ```
  项目根目录/
  ├── src/包名/          # 源代码
  │   ├── __init__.py    # 包初始化，导出公共 API
  │   ├── internal/      # 内部实现模块
  │   └── *.py           # 主要模块
  ├── tests/             # 测试代码
  │   ├── unit/          # 单元测试
  │   ├── integration/   # 集成测试
  │   └── examples/      # 示例测试
  ├── examples/          # 使用示例
  ├── pyproject.toml     # 项目配置
  └── README.md          # 项目文档
  ```

## 设计模式
- 优先使用建造者模式(Builder Pattern)提供流式 API
- 使用单例模式管理全局状态(如 trace_context)
- 将内部实现放在 `internal/` 目录下，保持 API 简洁
- 使用工厂函数创建复杂对象

## 配置管理
- 使用 `pyproject.toml` 作为主要配置文件
- 在 `[project]` 中定义项目元数据
- 在 `[project.optional-dependencies]` 中定义开发依赖
- 配置 pytest 路径：`pythonpath = [".", "src"]`

## 测试策略
- 分层测试：单元测试 + 集成测试 + 示例测试
- 测试文件命名：`test_*.py`
- 测试函数命名：`test_具体功能描述`
- 使用 `pytest` 作为测试框架
- 使用 `tmp_path` fixture 处理临时文件
- 使用 `capsys` fixture 捕获标准输出
- 每个测试应该独立且可重复执行

## API 设计
- 提供简洁明了的公共 API
- 在 `__init__.py` 中明确导出公共接口
- 使用链式调用提升用户体验
- 提供合理的默认值
- 支持上下文管理器(如有需要)

## 错误处理
- 使用适当的异常类型
- 提供清晰的错误消息
- 在日志中包含足够的上下文信息
- 优雅地处理边界情况

## 代码组织
- 使用描述性的模块和函数名称
- 将复杂逻辑分解为小函数
- 保持模块间的低耦合
- 使用适当的抽象层次

## 示例和演示
- 在 `examples/` 目录提供完整的使用示例
- 示例应该展示主要功能的用法
- 提供与流行框架(如 FastAPI)的集成示例
- 确保示例代码可以独立运行
